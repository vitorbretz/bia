#!/bin/bash

# Script de Deploy para ECS - Projeto BIA
# Autor: Amazon Q
# Vers√£o: 1.0

set -e

# Configura√ß√µes padr√£o
DEFAULT_REGION="us-east-1"
DEFAULT_CLUSTER="bia-cluster-alb"
DEFAULT_SERVICE="bia-service"
DEFAULT_TASK_FAMILY="bia-tf"
DEFAULT_ECR_REPO="bia-app"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir help
show_help() {
    cat << EOF
üöÄ Script de Deploy ECS - Projeto BIA

USO:
    ./deploy.sh [COMANDO] [OP√á√ïES]

COMANDOS:
    build       Faz build da imagem Docker com commit hash
    push        Faz push da imagem para ECR
    deploy      Faz deploy no ECS criando nova task definition
    rollback    Faz rollback para uma vers√£o anterior
    list        Lista as √∫ltimas 10 vers√µes dispon√≠veis
    help        Exibe esta ajuda

OP√á√ïES:
    -r, --region REGION         Regi√£o AWS (padr√£o: $DEFAULT_REGION)
    -c, --cluster CLUSTER       Nome do cluster ECS (padr√£o: $DEFAULT_CLUSTER)
    -s, --service SERVICE       Nome do servi√ßo ECS (padr√£o: $DEFAULT_SERVICE)
    -f, --family FAMILY         Fam√≠lia da task definition (padr√£o: $DEFAULT_TASK_FAMILY)
    -e, --ecr-repo REPO         Nome do reposit√≥rio ECR (padr√£o: $DEFAULT_ECR_REPO)
    -t, --tag TAG               Tag espec√≠fica para rollback
    -h, --help                  Exibe esta ajuda

EXEMPLOS:
    # Deploy completo (build + push + deploy)
    ./deploy.sh deploy

    # Build apenas
    ./deploy.sh build

    # Deploy em regi√£o espec√≠fica
    ./deploy.sh deploy --region us-west-2

    # Rollback para vers√£o espec√≠fica
    ./deploy.sh rollback --tag abc1234

    # Listar vers√µes dispon√≠veis
    ./deploy.sh list

FLUXO DE DEPLOY:
    1. Build da imagem com tag do commit hash
    2. Push da imagem para ECR
    3. Cria√ß√£o de nova task definition
    4. Update do servi√ßo ECS
    5. Aguarda deploy completar

ROLLBACK:
    O script mant√©m hist√≥rico de task definitions permitindo
    rollback r√°pido para qualquer vers√£o anterior.

EOF
}

# Fun√ß√£o para log colorido
log() {
    local level=$1
    shift
    case $level in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $*" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $*" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $*" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $*" ;;
    esac
}

# Fun√ß√£o para obter commit hash
get_commit_hash() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        git rev-parse --short=7 HEAD
    else
        log "ERROR" "N√£o √© um reposit√≥rio Git v√°lido"
        exit 1
    fi
}

# Fun√ß√£o para obter account ID
get_account_id() {
    aws sts get-caller-identity --query Account --output text --region "$REGION"
}

# Fun√ß√£o para fazer build da imagem
build_image() {
    local commit_hash=$(get_commit_hash)
    local account_id=$(get_account_id)
    local ecr_uri="${account_id}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"
    
    log "INFO" "Iniciando build da imagem..."
    log "INFO" "Commit hash: $commit_hash"
    log "INFO" "ECR URI: $ecr_uri"
    
    # Build da imagem
    docker build -t "${ECR_REPO}:${commit_hash}" .
    docker tag "${ECR_REPO}:${commit_hash}" "${ecr_uri}:${commit_hash}"
    docker tag "${ECR_REPO}:${commit_hash}" "${ecr_uri}:latest"
    
    log "SUCCESS" "Build conclu√≠do com sucesso!"
    echo "IMAGE_TAG=${commit_hash}" > .deploy_vars
    echo "ECR_URI=${ecr_uri}" >> .deploy_vars
}

# Fun√ß√£o para fazer push para ECR
push_image() {
    if [[ ! -f .deploy_vars ]]; then
        log "ERROR" "Arquivo .deploy_vars n√£o encontrado. Execute 'build' primeiro."
        exit 1
    fi
    
    source .deploy_vars
    
    log "INFO" "Fazendo login no ECR..."
    aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "${ECR_URI%/*}"
    
    log "INFO" "Fazendo push da imagem..."
    docker push "${ECR_URI}:${IMAGE_TAG}"
    docker push "${ECR_URI}:latest"
    
    log "SUCCESS" "Push conclu√≠do com sucesso!"
}

# Fun√ß√£o para criar task definition
create_task_definition() {
    if [[ ! -f .deploy_vars ]]; then
        log "ERROR" "Arquivo .deploy_vars n√£o encontrado. Execute 'build' primeiro."
        exit 1
    fi
    
    source .deploy_vars
    
    log "INFO" "Criando nova task definition..."
    
    # Obter task definition atual
    local current_td=$(aws ecs describe-task-definition \
        --task-definition "$TASK_FAMILY" \
        --region "$REGION" \
        --query 'taskDefinition' \
        --output json 2>/dev/null || echo "{}")
    
    if [[ "$current_td" == "{}" ]]; then
        log "WARN" "Task definition n√£o encontrada. Criando nova..."
        create_new_task_definition
    else
        log "INFO" "Atualizando task definition existente..."
        update_task_definition "$current_td"
    fi
}

# Fun√ß√£o para criar nova task definition
create_new_task_definition() {
    source .deploy_vars
    
    cat > task-definition.json << EOF
{
    "family": "$TASK_FAMILY",
    "networkMode": "awsvpc",
    "requiresCompatibilities": ["EC2"],
    "cpu": "256",
    "memory": "512",
    "executionRoleArn": "arn:aws:iam::$(get_account_id):role/ecsTaskExecutionRole",
    "containerDefinitions": [
        {
            "name": "bia-container",
            "image": "${ECR_URI}:${IMAGE_TAG}",
            "portMappings": [
                {
                    "containerPort": 8080,
                    "protocol": "tcp"
                }
            ],
            "essential": true,
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/$TASK_FAMILY",
                    "awslogs-region": "$REGION",
                    "awslogs-stream-prefix": "ecs"
                }
            },
            "environment": [
                {
                    "name": "NODE_ENV",
                    "value": "production"
                }
            ]
        }
    ]
}
EOF

    register_task_definition
}

# Fun√ß√£o para atualizar task definition existente
update_task_definition() {
    local current_td="$1"
    source .deploy_vars
    
    # Atualizar apenas a imagem na task definition
    echo "$current_td" | jq --arg image "${ECR_URI}:${IMAGE_TAG}" \
        'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy) | 
         .containerDefinitions[0].image = $image' > task-definition.json
    
    register_task_definition
}

# Fun√ß√£o para registrar task definition
register_task_definition() {
    log "INFO" "Registrando nova task definition..."
    
    local new_td=$(aws ecs register-task-definition \
        --cli-input-json file://task-definition.json \
        --region "$REGION" \
        --query 'taskDefinition.taskDefinitionArn' \
        --output text)
    
    log "SUCCESS" "Task definition criada: $new_td"
    echo "TASK_DEFINITION_ARN=${new_td}" >> .deploy_vars
    
    # Limpar arquivo tempor√°rio
    rm -f task-definition.json
}

# Fun√ß√£o para fazer deploy no ECS
deploy_service() {
    if [[ ! -f .deploy_vars ]]; then
        log "ERROR" "Arquivo .deploy_vars n√£o encontrado. Execute 'build' primeiro."
        exit 1
    fi
    
    source .deploy_vars
    
    log "INFO" "Atualizando servi√ßo ECS..."
    
    aws ecs update-service \
        --cluster "$CLUSTER" \
        --service "$SERVICE" \
        --task-definition "$TASK_DEFINITION_ARN" \
        --region "$REGION" \
        --query 'service.serviceName' \
        --output text > /dev/null
    
    log "SUCCESS" "Servi√ßo atualizado com sucesso!"
    log "INFO" "Aguardando deploy completar..."
    
    # Aguardar deploy completar
    aws ecs wait services-stable \
        --cluster "$CLUSTER" \
        --services "$SERVICE" \
        --region "$REGION"
    
    log "SUCCESS" "Deploy conclu√≠do com sucesso!"
    log "INFO" "Vers√£o deployada: ${IMAGE_TAG}"
}

# Fun√ß√£o para listar vers√µes
list_versions() {
    log "INFO" "Listando √∫ltimas 10 vers√µes dispon√≠veis..."
    
    aws ecs list-task-definitions \
        --family-prefix "$TASK_FAMILY" \
        --status ACTIVE \
        --sort DESC \
        --max-items 10 \
        --region "$REGION" \
        --query 'taskDefinitionArns[]' \
        --output table
}

# Fun√ß√£o para rollback
rollback() {
    local target_tag="$1"
    
    if [[ -z "$target_tag" ]]; then
        log "ERROR" "Tag para rollback n√£o especificada. Use --tag ou -t"
        exit 1
    fi
    
    log "INFO" "Iniciando rollback para vers√£o: $target_tag"
    
    local account_id=$(get_account_id)
    local ecr_uri="${account_id}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"
    
    # Verificar se a imagem existe
    if ! aws ecr describe-images \
        --repository-name "$ECR_REPO" \
        --image-ids imageTag="$target_tag" \
        --region "$REGION" > /dev/null 2>&1; then
        log "ERROR" "Imagem com tag '$target_tag' n√£o encontrada no ECR"
        exit 1
    fi
    
    # Criar task definition para rollback
    echo "IMAGE_TAG=${target_tag}" > .deploy_vars
    echo "ECR_URI=${ecr_uri}" >> .deploy_vars
    
    create_task_definition
    deploy_service
    
    log "SUCCESS" "Rollback conclu√≠do para vers√£o: $target_tag"
}

# Fun√ß√£o principal de deploy
full_deploy() {
    log "INFO" "Iniciando deploy completo..."
    build_image
    push_image
    create_task_definition
    deploy_service
    
    # Limpar arquivo tempor√°rio
    rm -f .deploy_vars
    
    log "SUCCESS" "Deploy completo finalizado!"
}

# Parse dos argumentos
REGION="$DEFAULT_REGION"
CLUSTER="$DEFAULT_CLUSTER"
SERVICE="$DEFAULT_SERVICE"
TASK_FAMILY="$DEFAULT_TASK_FAMILY"
ECR_REPO="$DEFAULT_ECR_REPO"
ROLLBACK_TAG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--region)
            REGION="$2"
            shift 2
            ;;
        -c|--cluster)
            CLUSTER="$2"
            shift 2
            ;;
        -s|--service)
            SERVICE="$2"
            shift 2
            ;;
        -f|--family)
            TASK_FAMILY="$2"
            shift 2
            ;;
        -e|--ecr-repo)
            ECR_REPO="$2"
            shift 2
            ;;
        -t|--tag)
            ROLLBACK_TAG="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        build|push|deploy|rollback|list|help)
            COMMAND="$1"
            shift
            ;;
        *)
            log "ERROR" "Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Verificar se comando foi especificado
if [[ -z "${COMMAND:-}" ]]; then
    log "ERROR" "Comando n√£o especificado"
    show_help
    exit 1
fi

# Executar comando
case "$COMMAND" in
    "build")
        build_image
        ;;
    "push")
        push_image
        ;;
    "deploy")
        full_deploy
        ;;
    "rollback")
        rollback "$ROLLBACK_TAG"
        ;;
    "list")
        list_versions
        ;;
    "help")
        show_help
        ;;
    *)
        log "ERROR" "Comando inv√°lido: $COMMAND"
        show_help
        exit 1
        ;;
esac
